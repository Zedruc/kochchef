table user {
  user_id int [pk, increment]

  firstname varchar(128)
  surname varchar(128)
  username varchar(128) [unique]
  avatar varchar(512)
  created_at timestamp [default: `CURRENT_TIMESTAMP`]

  email varchar(128) [unique]
  password char(60) [note: "60 byte bcrypt hash"]
  token char(64) [default: `SHA2(token, 256)`, note: "256 bits as hex digest, 4 bits per char = 64 characters"]
}

table rating {
  user_id int [not null, ref: < user.user_id]
  content varchar(1024)
  stars int
  created_at timestamp [default: `CURRENT_TIMESTAMP`]

  recipe_id int [not null, ref: < recipe.recipe_id]

  indexes {
    (user_id, recipe_id) [pk, unique, note: "One review per recipe"]
  }

  Note: 'CHECK (stars BETWEEN 0 AND 5)'
}

table meal {
  meal_id int [pk, increment]
  name varchar(128) [not null, unique]
  description varchar(512)
  image varchar(512)
}

table meal_alias {
  name varchar(128) [not null]
  meal_id int [not null, ref: < meal.meal_id]

  indexes {
    (meal_id, name) [pk, note: "name zu lower() normalisieren"]
  }
}

table recipe {
  recipe_id int [pk, increment]
  meal_id int [not null, ref: < meal.meal_id]
  image varchar(512)

  author_id int [not null, ref: < user.user_id]
  created_at timestamp [default: `CURRENT_TIMESTAMP`]

  name varchar(128) [not null]
  instructions text [not null, note: "Vllt. Markdown?"]

  indexes {
    (meal_id, name) [unique, note: "name zu lower() normalisieren"]
    (recipe_id) [note: "Schnellere Berechnung von AVG() Ã¼ber index"]
  }
}

table ingredient {
  ingredient_id int [pk, increment]
  name varchar(64) // never ever braucht eine ingredient mehr als 64 Buchstaben
  price decimal(6, 2)
}

table needed {
  recipe_id int [not null, ref: < recipe.recipe_id]
  ingredient_id int [not null, ref: < ingredient.ingredient_id]
  amount decimal(6, 2) // bspw. (0)1.25 TL Zucker
  unit varchar(16) // TL, EL, mg, L, etc.

  indexes {
    (recipe_id, ingredient_id) [pk]
  }
}